package ch03.section03

/** 함수형 프로그래밍
 *
 * 코틀린 다중 패러다임 언어 - 함수형 프로그래밍 (FP), 객체 지향 프로그래밍 (OOP)
 *
 * 함수형 프로그래밍
 * 코드 간략, 테스트나 재사용성 증가
 * 람다식, 고차 함수 사용해 구성
 * 순수 함수를 사용해야함 (같은 인자에 대하여 항상 같은 값 반환 (부작용 없는 함수) /  함수 외부의 어떤 상태도 변경X)

 * 순수 함수 사용 이유
 * 입력과 내용을 분리하고 모듈화 - 재사용성 높아짐 ( 여러가지 함수들과 조합해도 부작용 없음)
 * 특정 상태에 영향 주지않아 병행 작업 시 안전
 * 함수의 값을 추적, 예측 할 수 있기 때문에 테스트, 디버깅 등이 유리
 *
 * 함수를 매개변수, 인자에 혹은 반환값에 적용 (고차함수)
 * 함수를 변수나 데이터 구조에 저장
 * 유연성 증가

 * 람다식
 * 익명 함수의 하나의 형태로 이름 없이 사용 및 실행이 가능
 * { x, y -> x + y }
 * 람다식은 고차 함수에서 인자로 넘기거나 결과값으로 반환 등을 할 수 있음

 * 일급 객체
 * '함수의 인자'로 전달 할 수 있음
 * '함수의 반환값'에 사용할 수 있음
 * '변수에 담을 수' 있음
 * 코틀린에서 함수는 1급 객체로 다룸 (1급 함수라고도 함)
 * */

const val global = 10

// 순수함수
fun pure ( a: Int, b: Int) = a + b // 동일한 인자인 a, b를 입력 받아 항상 a+b를 출력 (부작용이 없음)

// 순수함수가 아닌 것
//fun notpure() { // 입력이 없음
//    val test = User.grade() // check() 함수에 없는 외부의 User 객체를 사용
//    if(test!=null) process(test) // 변수 test는 User.grade()의 실행 결과에 따라 달라짐
//}
fun notPure2(a: Int, b: Int): Int {
    return a + b + global // 입력값과 무관하게 외부의 변수 사용
}

// 고차함수
// 람다식 매개변수 sum
fun highFunc (sum: (Int, Int)-> Int, a: Int,b:Int): Int {
    return sum(a,b) // 람다식 표현문에 따라 결국 a+b의 정수값 결과를 반환
}

fun main() {
    println(highFunc({x,y->x+y},10,20)) // 람다식 함수를 인자로 넘김
}

